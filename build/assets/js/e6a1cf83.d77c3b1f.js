"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[913],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},s=Object.keys(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)r=s[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),f=n,h=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return r?i.createElement(h,a(a({ref:t},p),{},{components:r})):i.createElement(h,a({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,a=new Array(s);a[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,a[1]=o;for(var c=2;c<s;c++)a[c]=r[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7984:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=r(7462),n=(r(7294),r(3905));const s={sidebar_position:5},a="Registering a Client",o={unversionedId:"enterprise-issuer/registering-a-client",id:"enterprise-issuer/registering-a-client",title:"Registering a Client",description:"The Enterprise Issuer application uses OpenID for Verifiable Credential Issuance to issue Verifiable Credentials",source:"@site/docs/enterprise-issuer/05-registering-a-client.md",sourceDirName:"enterprise-issuer",slug:"/enterprise-issuer/registering-a-client",permalink:"/docs/docs/enterprise-issuer/registering-a-client",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Configuring the authentication mechanism",permalink:"/docs/docs/enterprise-issuer/authentication"},next:{title:"Showcase",permalink:"/docs/docs/category/showcase"}},l={},c=[{value:"How to register a Client using the <code>configiss</code> CLI",id:"how-to-register-a-client-using-the-configiss-cli",level:2},{value:"Configure with OIDC client_assertion",id:"configure-with-oidc-client_assertion",level:3},{value:"How a Wallet Provider can be registered as a Client to an Enterprise Issuer",id:"how-a-wallet-provider-can-be-registered-as-a-client-to-an-enterprise-issuer",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"registering-a-client"},"Registering a Client"),(0,n.kt)("p",null,"The Enterprise Issuer application uses OpenID for Verifiable Credential Issuance to issue Verifiable Credentials\nto wallets. Hence, the ",(0,n.kt)("inlineCode",{parentName:"p"},"authorization_code")," grant type is used as the primary way of issuing credentials, as it\nis proved to be the most sucure."),(0,n.kt)("p",null,"In order for a wallet to be able to receive a verifiable credential from an Enterprise Issuer, it is required to be registered as a trusted client in the clients registry of the Enterprise Issuer."),(0,n.kt)("p",null,"The need for a mechanism that authenticates the client is inevitable because an Issuer should know conformance status of wallet with all the security and legal regulations."),(0,n.kt)("h2",{id:"how-to-register-a-client-using-the-configiss-cli"},"How to register a Client using the ",(0,n.kt)("inlineCode",{parentName:"h2"},"configiss")," CLI"),(0,n.kt)("h3",{id:"configure-with-oidc-client_assertion"},"Configure with OIDC client_assertion"),(0,n.kt)("p",null,"The Enterprise Issuer supports authentication of a client through client assertion with ",(0,n.kt)("strong",{parentName:"p"},"private_key_jwt")," client assertion method."),(0,n.kt)("p",null,"On the wallet-start/ directory, run the following commands:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},'chmod +x $PWD/enterprise-issuer/cli/configiss\nexport PATH="$PWD/enterprise-issuer/cli:$PATH"\nexport DB_HOST="127.0.0.1"\nexport DB_PORT=3307\nexport DB_USER=root\nexport DB_PASSWORD=root\nexport DB_NAME=issuer\nconfigiss client remove --client_id did:key:dsfddfdf233e\nconfigiss client create --client_id did:key:dsfddfdf233e --client_secret wallet-secret --redirect_uri http://127.0.0.1:7777 --jwks_uri http://127.0.0.1:7777/jwks\n')),(0,n.kt)("h2",{id:"how-a-wallet-provider-can-be-registered-as-a-client-to-an-enterprise-issuer"},"How a Wallet Provider can be registered as a Client to an Enterprise Issuer"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Wallet Provider creates a DID and exposes the public key in a JWKS endpoint (",(0,n.kt)("a",{parentName:"li",href:"http://127.0.0.1:7777/jwks"},"http://127.0.0.1:7777/jwks"),")"),(0,n.kt)("li",{parentName:"ol"},"Wallet Provider sends the DID to the Authorization Server through an off-bound process (email or authenticated session)."),(0,n.kt)("li",{parentName:"ol"},"When a wallet wants to receive a credential, this DID will be used as the value for the ",(0,n.kt)("inlineCode",{parentName:"li"},"client_id")," parameter. The ",(0,n.kt)("inlineCode",{parentName:"li"},"client_assertion")," will be a JWT signed with the Wallet Provider's private key. The ",(0,n.kt)("inlineCode",{parentName:"li"},"client_assertion_method")," must have value ",(0,n.kt)("inlineCode",{parentName:"li"},"private_key_jwt"))))}d.isMDXComponent=!0}}]);